

.. |nbsp| unicode:: 0xA0
   :trim:

.. !split

Special features for teaching material
======================================

DocOnce offers some special features that can greatly aid development
of effective teaching material:

 * fancy admonitions

 * simple boxes

 * interactive code blocks

 * hidden code blocks

 * exercises

 * multiple-choice questions or quizzes

 * movies

 * quotes

These are briefly exemplified below. If you are mainly interested in how
to structure DocOnce-based books, you can safely jump to
the section :ref:`setup:rules:book:assembly`.

Admonitions
-----------

.. index:: admonitions


.. admonition:: Use admonitions

   Need to notify, warn, summarize, ask a question, give a tip,
   dive into less important details, or really emphasize a result?
   DocOnce features special
   *notice*, *warning*, *summary*,
   and *question* boxes for  called admonitions. These can be typeset in a
   variety of versions, depending on the output format
   (check out ``doconce format --help`` and the many options with ``admon``
   in the name).




Simple box
----------

.. index:: bbox box

Put a box around something important:


.. The below box could be typeset as .. admonition: Attention
   but we have decided not to do so since the admon needs a title
   (the box formatting is therefore just ignored)


.. math::
         1 + 1 = 2


**Note:**
Simple boxes are not supported in format ``sphinx``.

Interactive code
----------------

.. index:: interactive code

.. index:: pyoptpro interactive code

You can step through this code:

.. raw:: html

        <iframe width="950" height="500" frameborder="0"
                src="http://pythontutor.com/iframe-embed.html#code=n+%3D+4%0Ai+%3D+0%0Awhile+i+%3C%3D+n%3A%0A++++print+i%0A++++i+%2B%3D+1&curInstr=0&py=2&cumulative=false">
        </iframe>

In HTML and Sphinx format this code can be stepped through, while
in LaTeX one gets a link to a web page with this functionality.

Exercises
---------

.. index:: exercises in DocOnce


.. admonition:: Exercise environments

   DocOnce supports *exercise subsections*, which are subsections with some
   extra tagging for exercises. Important features are:
   
    * exercises can be divided into subexercises
   
    * one may specify filename(s) for delivering the answer to an exercise
   
    * one may specify filename(s) for the solution of an exercise
   
    * one may specify a remark (fun facts, comments)
   
    * one or more hints can be given to an exercise or subexercise
      (can be hidden in certain output formats)
   
    * any exercise or subexercise can have a solution field
   
    * any exercise or subexercise can have an answer field (very condensed solution)
   
    * solutions and answers can be removed from the document at compile time
   
    * exercises can have one of four titles: Exercise, Project, Problem, or
      Example




Quote
-----

There is also a *quote* environment (invisible box with larger
margins).


..

    We're programmers. Programmers are, in their hearts, architects, and the first thing they want to do when they get to a site is to bulldoze the place flat and build something grand. We're not excited by incremental renovation: tinkering, improving, planting flower beds.
    
    There's a subtle reason that programmers always want to throw away the code and start over. The reason is that they think the old code is a mess. And here is the interesting observation: they are probably wrong. The reason that they think the old code is a mess is because of a cardinal, fundamental law of programming:
    **It's harder to read code than to write it.**
    This is why code reuse is so hard. This is why everybody on your team has a different function they like to use for splitting strings into arrays of strings. They write their own function because it's easier and more fun than figuring out how the old function works.
    
    `Joel Spolsky <http://www.joelonsoftware.com/articles/fog0000000069.html>`__, 2000



Quiz
----

.. index:: quiz in DocOnce

.. --- previous heading type: subsection

.. begin quiz



**Question:** How can one typeset a multiple choice question or *quiz* in DocOnce?
Recall that a quiz may feature mathematics like

.. math::
         F = ma 

and even nicely typeset computer code:

.. code-block:: python

        def Newtons2nd(m, a):
            F = m*a
            return F
        
        print Newtons2nd(1.1, 2.0)


**Choice 1:** Cannot be typeset because online quiz tools ignore math and code typesetting. :abbr:`? (Wrong!)`

**Choice 2:** See the DocOnce `quiz manual <http://hplgit.github.io/doconce/doc/pub/quiz/quiz.html>`__. :abbr:`? (Right!)` :abbr:`# ( Here you see all capabilities demonstrated.)`

**Choice 3:** Read the quiz and the multiple answers out loud and hope for a magic translation to code. :abbr:`? (Wrong!)` :abbr:`# ( Not implemented this year - just had to come up with yet another choice...)`

.. end quiz


What about a video lecture?
---------------------------

.. index:: video in DocOnce

.. index:: embedded video in DocOnce

.. index:: movie in DocOnce

.. raw:: html
        
        <iframe width="640" height="480" src="http://www.youtube.com/embed/PtJrPEIHNJw" frameborder="0" allowfullscreen></iframe>


.. admonition:: Question

   Can you think of applications of the above mentioned features?




