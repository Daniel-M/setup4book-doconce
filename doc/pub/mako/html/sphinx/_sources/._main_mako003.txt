.. !split

Use of Mako/Python functions
============================

.. index:: functions in mako

.. index::
   single: mako; functions

Such if tests are fine to handle larger portions of text. What if you
need to have four versions of just one word or very short text?
A Mako function, defined as a standard Python function,
is then more appropriate.

Here is a definition of a suitable Mako function, which must be
defined inside
``<%`` and ``%>`` tags, using standard Python code:

.. code-block:: python

        <%
        def chversion(text_IT1413, text_IT1713b, text_general,
                      text_book1, text_book2):
            if COURSE == 'IT1713':
                return text_IT1413
            elif COURSE == 'IT1713b':
                text_IT1413b
            elif COURSE == 'general':
                return text_general
            elif COURSE == 'book1':
                return text_book1
            elif COURSE == 'book2':
                return text_book2
            else:
                return 'XXX WRONG value of COURSE: %s' % COURSE
        %>

In the running text you can call ``chversion`` with five arguments,
corresponding to the desired text in the five cases, and when ``doconce format``
is run, the value of ``COURSE`` determines which of the five cases that is used.
Here is an example on DocOnce text with a function call to ``chversion``:

.. code-block:: doconce

        It is extremely important to define the term *cure* accurately.
        Here we mean ${chversion('handle', 'handle',
        'resolve', 'treat', 'resolve')}.

You can easily use long multi-line strings as arguments, e.g.,

.. code-block:: doconce

        ... ${chversion("""
        Here comes
        a multi-line
        string""",
        'short string',
        'another short string',
        """4th
        multi-line
        string""",
        '5th string')}
        ...


.. admonition:: There are two types of Mako functions

   One type resembles Python functions, as demonstrated above. The other
   type employs a slightly different syntax and is exemplified in the file
   `doc/src/chapters/index_files.do.txt <http://tinyurl.com/kukz8pt/index_files-do.txt>`__. We refer to the `Mako syntax documentation <http://docs.makotemplates.org/en/latest/syntax.html>`__ for more information.




How to treat multiple programming languages in the same text
------------------------------------------------------------

With these ideas, it becomes straightforward to write a book that
has its program examples in multiple languages. Introduce ``CODE``
as the name of the language and use if tests for larger portions
of code and text, and Mako functions for shorter inline texts,
to handle text that depends on the value of ``CODE``.
The author has successfully co-written such a `book <http://hplgit.github.io/Programming-for-Computations/pub/p4c/index.html>`__
[Ref1]_
for mathematical programming with either Python or Matlab - the version
is set when running ``doconce format``.

Here is an example of text, in the style of the mention book,
where there are small differences
depending on the programming language:

.. code-block:: doconce

        The following ${CODE} function `sampler` does the job
        (see the file "${src('sampler')}":
        "https://github.com/myuser/myproject/src/${src('sampler')}"):
        
        ${copyfile('sampler')}
        
        Note that in ${CODE}, arrays start at index ${text2('0', '1')}.
        Array slices like ${verb2('vec[2:8]', 'vec(2:7)')}
        go from the first index (here `2`) up to
        ${text2('*but not including* the upper limit (here `8`)',
        '(including) the upper limit (here `7`)'}.
        % if CODE == 'Python':
        Also note that the file `sampler.py` is a module, meaning
        that we can call all the file's functions from other programs,
        including `sampler_vec`.
        % elif CODE == 'Matlab':
        Also note that only the `sampler` function can be called
        from other Matlab programs. If we want the alternative
        implementation in function `sampler_vec` to be reused
        by other programs, this function has to reside in a file
        `sampler_vec.py`.
        % endif

Here we have made use of a few Mako functions to easily
choose between a Python or Matlab relevant text:

 * ``src`` for picking a filename with the right extension (``.py`` or ``.m``)

 * ``copyfile`` for constructing the right ``@@@CODE`` line for a Python or
   Matlab source code file

 * ``text2`` for picking the first (Python) or second (Matlab) argument

 * ``verb2`` for picking the first (Python) or second (Matlab) argument typeset in
   inline verbatim font

The exact Mako code appears below.

.. code-block:: doconce

        <%
        def src(filestem, url=None, verb=True):
            """Return filstem plus .m or .py."""
            if CODE == "Python":
                filename = filestem + '.py'
            else:
                filename = filestem + '.m'
            if verb:
                filename = '`%s`' % filename
            if url is not None:
                # Make link to the file at github
                pass
            return filename
        
        def copyfile(filestem, from_=None, to_=None):
            """Return @@@CODE line for copying a Python/Matlab file."""
            r = "@@@CODE "
            if CODE == "Python":
                r += "py-src/" + filestem + '.py'
            else:
                r += "m-src/" + filestem + '.m'
            if from_ is not None:
                r += ' fromto: ' + from_ + '@'
            if to_ is not None:
                r += to_
            return r
        
        def verb2(py_expr, m_expr):
            """Return py_expr or m_expr in verbatim depending on CODE."""
            if CODE == "Python":
                expr = py_expr
            else:
                expr = m_expr
            expr = '`%s`' % expr
            return expr
        
        def text2(py_expr, m_expr):
            """Return py_expr or m_expr depending on CODE."""
            if CODE == "Python":
                expr = py_expr
            else:
                expr = m_expr
            return expr
        
        %>

Compiling the document with

.. code-block:: text

        Terminal> doconce format plain mydoc CODE=Python \
                  --latex_code_style=pyg

results in the output

.. code-block:: text

        The following Python function \Verb!sampler! does the job
        (see the file
        \href{{https://github.com/myuser/myproject/src/`sampler.py`}}{
        \nolinkurl{sampler.py}}):
        
        \begin{minted}[fontsize=\fontsize{9pt}{9pt},linenos=false,
        baselinestretch=1.0,fontfamily=tt,xleftmargin=2mm]{python}
        """Sampler module."""
        
        def sampler(...):
            ...
        \end{minted}
        
        Note that in Python, arrays start at index 0.
        Array slices like \Verb!vec[2:8]!
        go from the first index (here \Verb!2!) up to
        \emph{but not including} the upper limit (here \Verb!8!).
        Also note that the file \Verb!sampler.py! is a module, meaning
        that we can call all the file's functions from other programs,
        including \Verb!sampler_vec!.

Switching to ``CODE=Matlab`` gives

.. code-block:: text

        The following Matlab function \Verb!sampler! does the job
        (see the file
        \href{{https://github.com/myuser/myproject/src/`sampler.m`}}{
        \nolinkurl{sampler.m}}):
        
        \begin{minted}[fontsize=\fontsize{9pt}{9pt},linenos=false,
        baselinestretch=1.0,fontfamily=tt,xleftmargin=2mm]{matlab}
        % Sampler code
        
        function samples = sampler(...):
            ...
        \end{minted}
        
        Note that in Matlab, arrays start at index 1.
        Array slices like \Verb!vec(2:7)!
        go from the first index (here \Verb!2!) up to
        (including) the upper limit (here \Verb!7!.
        Also note that only the \Verb!sampler! function can be called
        from other Matlab programs. If we want the alternative
        implementation in function \Verb!sampler_vec! to be reused
        by other programs, this function has to reside in a file
        \Verb!sampler_vec.py!.

References
==========

.. [Ref1]
   **S. Linge and H. P. Langtangen**. *Programming for Computations*,
   2015,
   `http://hplgit.github.io/Programming-for-Computations/pub/p4c/ <http://hplgit.github.io/Programming-for-Computations/pub/p4c/>`_.


