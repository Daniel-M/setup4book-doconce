

.. |nbsp| unicode:: 0xA0
   :trim:

.. !split

Study guides and slides
=======================

DocOnce has good support for creating slides from ordinary documents
with running text. Rather than speaking about slides, we think of
*study guides* where the material is presented in a very condensed,
effective, summarizing form for overview, use in lectures, and
repetition. The slide format is a good way of writing study guides,
but by explicitly thinking of study guides the slide format can be
made more effective for self-study when overview and repetition are
necessary - with a particular emphasis on gaining understanding.

It is, of course, a very challenging balance between enough
information for self-study by reading slides and overwhelmingly much
text and information in slides for oral presentations. Text must
anyway be minimized all the way on slides, and the reader of a study
guide is supposed to also be a reader of the underlying running text
in the chapter.

Slide directory
---------------

For each DoOnce file in the chapter ``ch2`` it can be wise to make a
corresponding study guide file in the subdirectory ``slides-ch2``.
For example, ``part1.do.txt`` has its counterpart with slides in
``slides-ch2/part1.do.txt``. Then there is a file ``slides_ch2.do.txt``
which assembles the parts if ``slides-ch2``, typically with a content
like

.. code-block:: doconce

        TITLE: Study Guide: Some title
        AUTHOR: Author Name Email:somename@someplace.net at Institute One
        DATE: today
        
        # #ifdef WITH_TOC
        !split
        TOC: on
        # #endif
        
        # #include "lec-ch2/part1.do.txt"
        
        # #include "lec-ch2/part2.do.txt"
        
        # #include "lec-ch2/part3.do.txt"

Generating slides from running text
-----------------------------------

The author has the following work flow for generating slides for a
chapter file, say ``part1.do.txt``.

1. Copy ``part1.do.txt`` to ``slides-ch2/part1.do.txt``.

2. Make ``slides_ch2.do.txt`` and include ``slides-ch2/part1.do.txt``.

3. Decide on *parts* of the slide collection. Often a part can be
   a section in the parent ``ch2.do.txt`` file, but sometimes it can
   be more natural to have larger parts than sections in the slide
   collection.

4. Each part in the slide file has a DocOnce section heading  with 7 ``=``, while
   each slide has a DocOnce subsection heading with 5 ``=``.

5. Edit ``slides-ch2/part1.do.txt``:

   * One can keep subsection headings from the running text for the most part,
     but slides need many more subsection headings.

   * Try to let the heading summarize explicitly a conclusion/rule from
     the slide (the slide table of contents is then a set of conclusions/rules!)

   * Remember a ``!split`` right above very slide heading!

   * Compile frequently and look at the slides: they become over-full very
     quickly so there is a constant need for dividing slides into new
     ones with new headings.

   * Read a paragraph, focus on its main idea and result, and see how it
     can be condensed to one sentence or a few bullet points.
     *Making effective slides is the art of condensing the most
     important information in the text to a eye-catching format.*

   * Do not remove figures without a very good reason. Figures are important!

   * Add new images to live up the presentation. In slides you may think of
     cartoons or entertaining images that would never be suitable
     in a chapter/book, but they may help attract attention,
     communicate ideas, and enhance the memory process.

   * Condense every mathematical derivation. Make sure the goal and end
     result is clear before diving into details.

   * Detailed derivations are seldom of interest in a study guide or
     oral presentation - refer to the underlying running text in the
     chapter for the details. Focus on ideas and key mathematical steps (if they
     are important enough).

   * Remember that equations are sometimes excellent images for ideas!
     Complicated equations can therefore be important slide elements
     although the details will never be addressed.

   * It is quite often wise to remove equation numbers in slides.
     You can edit the LaTeX math environment manually, or use
     ``--denumber_all_equations`` to do it automatically. Remember that
     references to equations numbers must be removed from the slides too!

   * Movies are effective in slides. It is still a hassle to get them
     displayed correctly in PDF files, so using a test on ``FORMAT`` and
     writing ``MOVIE`` for HTML output and just a link in PDF output
     might be necessary. See the `manual <http://hplgit.github.io/doconce/doc/pub/manual/html/manual.html#movies>`__ for how to work with movies in DocOnce.

The slides are to fulfill three purposes:

1. reading as a study guide to get overview before reading the
   full text of chapter,

2. watching as slides during an oral presentation,

3. reading as a study guide to repeat and enforce overview of the material.

It is highly non-trivial to meet all these purposes: limit the
information on the slides, make them as visual as *feasible*, make them
self contained, and provide the *sufficient* amount of
information. Considerable iterations are always needed. Reading the
slides as a study guide is easy to accomplish. The slides' properties
in live presentations can only be tested by speaking to them (making a
rough draft of a video podcast is a very effective way of testing
the slides' quality).

Compiling slides
----------------

There is a quite general script in ``doc/src/chapters/make_slides.sh`` for
compiling a slide collection defined in a file like ``slides_ch2.do.txt``.
Just run

.. code-block:: text

        Terminal> bash ../make_slides.sh slides_ch2

from the chapter directory. Note that the script will first spell check
the slide files. This is done in the ``slides-ch2`` directory. Errors are
reported in files located in ``slides-ch2``. To update the chapter's dictionary
for spell checking, you need to do

.. code-block:: text

        Terminal> cp slides-ch2/new_dictionary.txt~ .dict4spell

in the ``ch2`` chapter directory.

Similarly, to look at misspellings,
the file ``slides-ch2/misspellings.txt |nbsp| `` is the relevant file.

The ``make_slides.sh`` script compiles a variety of slides:

 * First a plain LaTeX PDF document to catch as many errors in the
   DocOnce source as early as possible. This document can also be
   used for compact printing of the contents of the study guide
   (and the output looks definitely like a study guide and not slides!).

 * HTML5 ``reveal.js`` slides with different colors.

 * HTML5 ``deck.js`` slides. This format is usually inferior to ``reveal.js``,
   but is also very much personal taste.

 * LaTeX Beamer slides. Edit the ``theme=red_shadow`` line in ``make_slides.sh``
   to control the Beamer theme.

 * Remark (Markdown) slides for viewing in a browser.

References
==========

.. [Ref1]
   **H. P. Langtangen**. *A Primer on Scientific Programming With Python*,
   fourth edition,
   *Texts in Computational Science and Engineering*,
   Springer,
   2014.

.. [Ref2]
   **H. P. Langtangen**. Some document,
   `http://hplgit.github.io/setup4book-doconce/doc/pub/fake <http://hplgit.github.io/setup4book-doconce/doc/pub/fake>`_.


