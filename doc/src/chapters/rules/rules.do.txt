This ${CHAPTER} describes the file structure of book or thesis projects.

======= Directory structure =======
label{sec:rules:dir:struct}

We shall outline a directory structure that can be effective when
assembling different DocOnce documents into a book.  The root
directory for all documentation is called `doc`, with two
subdirectories: `src` for all the DocOnce source code, and `pub` for
compiled (published) documents in various formats. A third
subdirectory, `web`, is often present as an entry point for the web
pages on GitHub. This directory typically contains the autogenerated
`index.html` and additional style files on GitHub. The `index.html`
file should have links to published documents in `../pub`.

Under `src` we may have a directory `chapters` for
the individual chapters and a directory `book` for the assembly into
a book. One may also think of more than one book directory if a set
of documents (chapters) naturally leads to multiple books. All
chapters can then be put in the `chapters` directory.

Each chapter has a short nickname, say `ch2` for simplicity
for Chapter 2 (a more descriptive name related to the content is obviously
much better!). Figures are placed in subdirectory `fig-ch2` and
computer code in subdirectory `src-ch2`.
These two latter directories may have subdirectories if desired.
We may also include a directory `mov-ch2` for video files, `exer-ch2` for
answers to exercises, etc.

An outline of the directory structure is listed below.

!bc
doc
  src
    chapters
      ch2
        fig-ch2
        src-ch2
        mov-ch2
        exer-ch2
    book
  pub
    chapters
    book
!ec

Under `book`, we typically have a document `book.do.txt` for the complete
book. This is a file with a lot of `# #include "...do.txt"` for
including the files for the various chapters, see Section
ref{setup:rules:book:assembly} for details. Additional files
in the `book` directory include make files for compiling the book,
scripts for packing the book for publishing, perhaps an errata document, etc.


======= Newcommands =======

Files with names `newcommands*.tex` are by DocOnce treated as files
with definition of newcommands for LaTeX mathematics.
These files must reside in the same
directory as the DocOnce source files. However, for a book project,
it is common to have one newcommands file shared by all chapters.
This file is placed
in `doc/src/chapters/newcommands.p.tex` and copied to a specific
chapter by the make script for that chapter. The extension of
the file is `.p.tex`, indicating that the file has to be
*preprocessed* by `preprocess` prior to being copied. The reason
is that one occasionally wants the definitions of the newcommands
to depend on the output format (standard LaTeX or MathJax).
For example, subscripts in `mbox` font look best with footnotesize
font in plain LaTeX, while the larger `small` font is more appropriate
for MathJax. We can then put the following definitions in
`newcommands.p.tex`:

!bc latexcod
%% #if FORMAT in ("latex", "pdflatex")
%% Use footnotesize in subscripts
\newcommand{\subsc}[2]{#1_{\mbox{\footnotesize #2}}}
%% #else
%% In MathJax, a different construction is used
\newcommand{\subsc}[2]{#1_{\small\mbox{#2}}}
%% #endif
!ec
## Note: need double %% above because single % is interpreted
## by mako as command... (doconce reports error for single %)
The make script will then run `preprocess` on this file,
typically

!bc shcod
preprocess -DFORMAT=pdflatex ../newcommands.p.tex > newcommands.tex
# or
preprocess -DFORMAT=html ../newcommands.p.tex > newcommands.tex
!ec

!bwarning DocOnce newcommands are for mathematics only!
Note that
newcommands in DocOnce context are only used for mathematics,
rendered by LaTeX or MathJax. Newcommands for other LaTeX constructions
(such as section or boxes) should not be used in the DocOnce source
code as these are confined
to the LaTeX format. Use instead Mako functions.
!ewarning


======= Assembling different pieces to a book =======
label{setup:rules:book:assembly}

Many smaller writings in the DocOnce format can be assembled
into a single, large document such as a book or thesis.
The recipe for doing this appears below.

===== Organization of a chapter =====

Suppose one chapter) of the book
has the nickname `ch2` and consists
of the DocOnce files `part1.do.txt`, `part2.do.txt`, and
`part3.do.txt`. These are assembled in one chapter file, `ch.do.txt` with
the simple content

@@@CODE src-rules/ch2.do.txt

## Note: ch2.do.txt contains preprocess commands so we cannot just
## put it into !bc do ... !ec environment here because then preprocess
## will try to do the fake includes... That is why we copy code from file.

Note that the `ch2.do.txt` file contains just plain text without
any `TITLE`, `AUTHOR`, or `DATE` lines and without any
table of contents (`TOC`). This property makes `ch2.do.txt`
suitable for being including in other documents like a book.
However, to compile `ch2.do.txt` to a stand-alone document,
we normally want a title, an author,
a date, and perhaps a table of contents.
We also want a bibliography if any of the included files has
`cite` tags. To this end, we create a wrapper file, say `main_ch2.do.txt`,
with the content

@@@CODE src-rules/main_ch2.do.txt

Recall that DocOnce relies on the Publish software for handling
bibliographies. It is easy to import from BibTeX to Publish and
create a database of references (`papers.pub`) to get started (but
we recommend to continue working with the
Publish database directly and collect new items in the `papers.pub` file
as Publish is more flexible than BibTeX).


===== Figures and source code =====

As described in Section ref{sec:rules:dir:struct}, we recommend to put
figures and source codes (to be included in the document) in separate
directories. Although such directories could have natural names like
`fig` and `src`, it will cause trouble if we do not use unique names
for these directories, like `fig-ch2` and `src-ch2`. Otherwise, we
would need to copy all figures in all pieces into a common `fig`
directory for the book and all source code files into a `src`
directory. With unique names, figures and source code files can always
reside in their original locations, and we can easily reach them
through links. This will be described next.

===== Assembly of chapters =====

All the files associated with the `ch2` document and chapter reside
in the `ch2` directory. A fundamental principle of DocOnce is to
have just one copy of the files (``Document once!'').
To include the `ch2` text in a larger document like a book, we just
need to include the `ch2.do.txt` file and a chapter heading.
Here is an example of a document `book.do.txt` for a complete book:

@@@CODE src-rules/book.do.txt

When running `doconce format` on `book.do.txt`, the entire document
is contained in *one* big file[^one-file] (!).
To see exactly what has been included,
you can examine the result of running the first preprocessor, `preprocess`,
on `book.do.txt`. All the includes are handled by this preprocessor.
The result is contained in the file
`tmp_preprocess__book.do.txt`, which then contains the entire
DocOnce source code of the book. The second preprocessor, `mako`, is thereafter
run (if DocOnce detects that it is necessary).
The result of that step is available in
`tmp_mako__book.do.txt`. It is important to examine this file if there
are problems with Mako variables or functions.
The `tmp_mako__book.do.txt` file is thereafter translated to
the desired output format.

[^one-file]: A single DocOnce file and consequently a single
`.tex` file works out well on today's laptops.
A book with 900 pages cite{Langtangen_2014} has been tested!

Say we want to produce a LaTeX document:

!bc sys
Terminal> doconce format pdflatex book [options]
!ec
If the DocOnce source contains copying of source code from files in
`@@@CODE` constructs, it is important that `doconce` finds the files.
For example,

!bc do
@@@CODE src-ch2/myprog.py  fromto: def test1@def test2
!ec
will try to open the file `src-ch2/myprog.py`. Since this file is
actually located in `../ch2/src-ch2/myprog.py`, `pdflatex` will
report an error message. A local link to
that directory resolves the problem:

!bc sys
Terminal> ln -s ../chapters/ch2/src-ch2 src-ch2
!ec
Similarly,
the LaTeX code in `book.tex` for inclusion of a figure may
contain

!bc latexcod
\includegraphics[width=0.9\linewith]{fig-ch2/fig1.pdf}
!ec
For this command to work, it is paramount that there is a link `fig-ch2` in the
present `book` directory where the `pdflatex` command is run to
the directory `../chapters/ch2/fig-ch2` where the figure file `fig1.pdf` is
located.

It is recommended to use the function `make_links` in `scripts.py` to
automatically set up all convenient links from the `book` directory
to the individual chapter directories. Provided the list of chapter nicknames
at the top of `scripts.py` is correct, you can just run

!bc pyshell
>>> import scripts
>>> scripts.make_links()
!ec
to automatically
set up all links to all `src-*`, `fig-*`, and `mov-*` directories.
You need to rerun this `make_links` function after inclusion of a new chapter
in the `chapters` tree.

!bwarning Identify LaTeX errors in the original chapter files!
When you run `pdflatex book` and get LaTeX errors, you need
to see where they are in `book.tex` and use this information to
find the appropriate DocOnce source file in some chapter.
Usually, there are few errors at the ``book level'' if each individual
chapter has been compiled. To this end, you can use `scripts.py` to
automatically compile each chapter separately. The process is stopped
as soon as a DocOnce or LaTeX error is encountered.

!bc pyshell
>>> import scripts
>>> scripts.compile_chapters()
!ec
!ewarning


===== About figures when publishing HTML ===

When an HTML document is produced, there will be `<img
src=fig-ch2/fig1.png>` type of tags in the HTML code, so it is very
important to ensure that the published `.html` files have access to a
subdirectory `fig-ch2`. Normally, one needs to copy `fig-ch2` from the
`ch2` directory to some directory with all the files necessary for
publishing the entire HTML document.

======= Tools =======

You can start a new, future, potential book project by simply copying
the directory structure of the "`setup4book-doconce`": "https://github.com/hplgit/setup4book-doconce" repository on GitHub.

===== Making a new chapter =====

Under `doc/src/chapters`
you find the chapters in this ``sample book'' as well as a script
`doc/chapters/mkdir.sh` that creates a new directory for you with the
typical files needed for a new chapter. You can either edit existing
chapters, or make a brand new empty chapter by running

!bc sys
Terminal> sh mkdir.sh mychap
!ec
This command makes
a directory `mychap` for a new chapter with nickname `mychap`.
(Files from the `template` directory are used to populate `mychap`.)

===== Compiling the chapter =====

To make a stand-alone document of a chapter, by compiling to LaTeX and PDF,
we propose the convention to have a `make.sh` in each chapter directory.
This `make.sh` can in most cases just call up a common `../make.sh`
script,

!bc shpro
bash -x ../make.sh main_mychap
!ec
or optionally with some command-line arguments,

!bc shpro
bash -x ../make.sh main_mychap --encoding=utf-8
!ec
The `doc/src/chapters/make.sh` script is quite general and can be edited
according to your layout preferences of the LaTeX document.

There is also a script `doc/src/chapters/make_html.sh` for making
HTML versions of the chapter. Just call this as

!bc sys
Terminal> bash ../make.sh main_mychap
!ec
to make HTML versions of the `mychap` chapter.
The current version of `make_html.sh` creates three types of HTML
layouts and an `index.html` file with a list of these three files.

===== Compiling the book =====

Go to `doc/src/book` and run `make.sh` to compile the book. This requires
that `book.do.txt` performs the right include of chapters, table of
contents, and bibliography.

There are many other tools in `doc/src/book` too, e.g., the mentioned
library of handy scripts in `scripts.py`, and an example on how to
pack all files of the entire book projects for publishing with Springer
(`pack_Springer.sh`).

The current book layout created by `make.sh` makes use of a (now outdated)
Springer T2 style for textbooks (requires the `.cls` and `.sty` files in
the `book` directory). Other Springer styles supported by DocOnce
are Lecture Notes in Computational Science and Engineering (monographs
and proceedings),
Lecture Notes in Computer Science (proceedings), and Undergraduate Texts
in Physics. Other book styles will require some manual work, either
working out a LaTeX preamble for a special style and use that when
compiling `book.do.txt` or actually extending the DocOnce source code.
